package main

import (
	"fmt"
)

/**
123. 买卖股票的最佳时机 III
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1]
输出: 0
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。

提示：

1 <= prices.length <= 3 * 10 ^ 4
0 <= prices[i] <= 10 ^ 4
*/

// dp
func maxProfit(prices []int) int {
	if len(prices) == 0 || len(prices) == 1 {
		return 0
	}
	dp := make([][3][2]int, len(prices)) //初始化时注意第二维，第三维的维度

	dp[0][0][0], dp[0][0][1] = 0, -prices[0]
	dp[0][1][0], dp[0][1][1] = 0, -prices[0]
	dp[0][2][0], dp[0][2][1] = 0, -prices[0]

	for i := 1; i < len(prices); i++ {
		//第 i 天 0 次交易 没有股票最大利润 = 第 i-1 天 0 次交易 没有股票最大利润
		dp[i][0][0] = dp[i-1][0][0]
		//第 i 天 0 次交易 有股票最大利润 = max(第 i-1 天 0 次交易 有股票最大利润 , 第 i-1 天 0 次交易 无股票最大利润 - 当天股票价格prices[i]（买入）)
		dp[i][0][1] = max(dp[i-1][0][1], dp[i][0][0]-prices[i])
	}

	for i := 1; i < len(prices); i++ {
		for k := 1; k <= 2; k++ {
			// #第 i 天 k 次交易 有股票最大利润 = max(第 i-1 天 k 次交易 有股票最大利润 , 第 i-1 天 k-1 次交易 无股票最大利润 - 当天股票价格prices[i]（买入）)
			dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0]-prices[i])

			//第 i 天 k 次交易 无股票最大利润 = max(第 i-1 天 k次交易 无股票最大利润 , 第 i-1 天 k次交易 有股票最大利润 + 当天股票价格prices[i]（卖出）)
			dp[i][k][0] = max(dp[i-1][k][0], dp[i][k][1]+prices[i]) // dp[i][k][0] 与 dp[i][k][1] 的顺序关系很重要，
			// 原因是dp[i][k][0]依赖于dp[i][k][1]
		}
	}

	res := max(dp[len(prices)-1][0][0], max(dp[len(prices)-1][1][0], dp[len(prices)-1][2][0]))
	return res
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
func main() {

	m := []int{3, 3, 5, 0, 0, 3, 1, 4}
	res := maxProfit(m)
	fmt.Println(res)

	n := []int{3, 3, 5, 0, 0, 3, 1, 4}
	rs := maxProfit(n)
	fmt.Println(rs)
}
